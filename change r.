fn invert(s: String) -> String {
    let mut result = String::new();
    
    for c in s.chars() {
        if c.is_uppercase() {result.push(c.to_lowercase().next().unwrap());}
        else if c.is_lowercase() {result.push(c.to_uppercase().next().unwrap());}
        else {result.push(c);}
    }
    result
}

fn main() {
    let result = invert("Hello".to_string());
    println!("Інвертований рядок: {}", result);
}

Спочатку я створив функцію invert, яка приймає рядок типу String. В ній я визначив змінну result, яка є порожнім рядком — сюди буду додавати змінені символи.

Потім я використав цикл for, щоб пройти по кожному символу в рядку. Якщо символ в верхньому регістрі, я змінив його на нижній за допомогою методу to_lowercase() і додав до результату. 

Якщо символ був у нижньому регістрі, я зробив навпаки — використав to_uppercase() для зміни на верхній регістр. Якщо це не літера (наприклад, пробіл або цифра), то просто додав його без змін.

Після того, як я обробив усі символи, функція повертає результат.

У main() я викликав функцію invert() з рядком "Hello" і зберіг результат. Потім використав println!, щоб вивести результат на екран.
